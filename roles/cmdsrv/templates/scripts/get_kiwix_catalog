#!/usr/bin/python

import xml.etree.ElementTree as ET
import json
import csv
import operator
import base64
import os.path
import sys
import urllib2
import time

verbose = False
if len(sys.argv) > 1:
    if sys.argv[1] in ('-v'):
        verbose = True

# for testing
#WWROOT = "/library/www/html"
#jsonPath = "/etc/iiab"

WWROOT = "{{ doc_root }}"
jsonPath = "{{ iiab_config_dir }}"

zimCat = {}
zims = {}

zimCount = 0

# as of Apr 13, 2015
problemUrlMap = {"http://download.kiwix.org/zim/0.9/wikipedia_en_ray_charles_03_2013.zim.meta4":"http://download.kiwix.org/portable/wikipedia/kiwix-0.9+wikipedia_en_ray_charles_03_2013.zip", \
    "http://download.kiwix.org/zim/0.9/wikipedia_en_wp1_0.8_45000+_12_2010.zim.meta4":"http://download.kiwix.org/portable/wikipedia/kiwix-0.9+wikipedia_en_wp1_0.8_45000+_12_2010.zip", \
    "http://download.kiwix.org/zim/0.9/wikipedia_es_venezuela_11_2012.zim.meta4":"http://download.kiwix.org/portable/wikipedia/kiwix-0.9+wikipedia_es_venezuela_11_2012.zip", \
    "http://download.kiwix.org/zim/wikispecies/wikispecies_en_all_nopic_2015-03.zim.meta4":"http://download.kiwix.org/portable/wikispecies/kiwix-+wikispecies_en_all_nopic_2015-03.zip", \
    "http://download.kiwix.org/zim/wikispecies/wikispecies_en_all_2015-03.zim.meta4":"http://download.kiwix.org/portable/wikispecies/kiwix-+wikispecies_en_all_2015-03.zip"}

# input file

kiwixLibUrl = 'http://download.kiwix.org/library/library.xml'
zimKiwixUrl = "http://download.kiwix.org/portable/"
zimKiwixPrefix = "kiwix-0.9+"

# output files

kiwix_catalog = jsonPath + "/kiwix_catalog.json"

if verbose:
    print "Starting xml download from Kiwix"

try:
    xmlsrc = urllib2.urlopen(kiwixLibUrl)
    tree = ET.parse(xmlsrc)
    xmlsrc.close()
    if verbose:
        print "XML received from Kiwix"
except (urllib2.URLError) as exc:
    if verbose:
        print "Error getting XML from Kiwix"
    sys.stdout.write("GET-KIWIX-CAT ERROR - " + str(exc.reason))
    sys.stdout.flush()
    sys.exit(1)

#tree = ET.parse("assets/test.xml")

if verbose:
    print "Parsing xml download from Kiwix"

root = tree.getroot()

if verbose:
    print "Starting of processing xml download from Kiwix to " + kiwix_catalog

for child in root:
   attributes = {}
   zimAttr = {}
   attributes = child.attrib
   if 'id' in attributes and 'language' in attributes and 'creator' in attributes:
      id = attributes['id']
      lang = attributes['language']
      category = attributes['creator']
      url = attributes['url']
      urlSlash = url.split('/')
      urlEnd = urlSlash[-1] # last element
      if url in problemUrlMap:
          downloadUrl = problemUrlMap[url]
      else:
          downloadUrl = url.replace("/zim/", "/portable/")
          downloadUrl = downloadUrl.replace(urlEnd, zimKiwixPrefix + urlEnd)
          downloadUrl = downloadUrl.replace(".zim.meta4", ".zip")
      fileRef = urlEnd.split('.')
      fileRef = fileRef[0]
      permaRefParts = urlEnd.split('_')
      permaRefParts = permaRefParts[0:len(permaRefParts) - 1]
      permaRef = permaRefParts[0]
      for part in permaRefParts[1:]:
         if not part.isdigit():
            permaRef += "_" + part
      zimCount += 1
      # print zimCount, attributes['language'], attributes['title'], attributes['description']
      for key in attributes:
          if key != 'favicon' and key != 'faviconMimeType':
              zimAttr[key] = attributes[key]
      zimAttr['download_url'] = downloadUrl
      zimAttr['file_ref'] = fileRef
      zimAttr['perma_ref'] = permaRef
      zims[id] = zimAttr

zimCat['download_date'] = time.strftime("%Y-%m-%d.%H:%M:%S")
zimCat['zims'] = zims

if verbose:
    print "Ready to write " + kiwix_catalog

with open(kiwix_catalog, 'w') as fp:
    json.dump(zimCat, fp)

if verbose:
    print "Finished writing to " + kiwix_catalog

sys.stdout.write("SUCCESS")
sys.stdout.flush()
sys.exit(0)


